---
interface Props {
  pages: (string | { src: string; span?: 'single' | 'double' })[];
  title: string;
}
const { pages, title } = Astro.props;
---

<div id="flipbook-modal" class="flipbook-modal">
    <div class="flipbook-backdrop"></div>
        <div class="flipbook-content">
            <div class="book-display" id="book-display">
        </div>
        <div class="control-bar">
            <button id="prev-btn" class="control-btn" disabled>Previous</button>
            <button id="close-btn" class="control-btn close-btn">Exit</button>
            <button id="next-btn" class="control-btn">Next</button>
        </div>
    </div>
</div>

<script define:vars={{ pages }}>
    class SimpleFlipbook {
        constructor(pages) {
            this.pages = pages.map(page => {
                if (typeof page === 'string') {
                    return { src: page, span: 'single' };
                }
                return { src: page.src, span: page.span || 'single' };
            });
            this.currentPage = 0;
            this.isDesktop = window.innerWidth > 768;
            this.init();
        }

        init() {
            this.modal = document.getElementById('flipbook-modal');
            this.bookDisplay = document.getElementById('book-display');
            this.prevBtn = document.getElementById('prev-btn');
            this.nextBtn = document.getElementById('next-btn');
            this.closeBtn = document.getElementById('close-btn');
            this.openBtn = document.getElementById('open-flipbook');
            this.bindEvents();
        }

        bindEvents() {
            if (this.openBtn) {
                this.openBtn.addEventListener('click', () => this.open());
            }

            this.prevBtn.addEventListener('click', () => this.previousPage());
            this.nextBtn.addEventListener('click', () => this.nextPage());
            this.closeBtn.addEventListener('click', () => this.close());

            this.modal.addEventListener('click', (e) => {
                if (e.target === this.modal || e.target.classList.contains('flipbook-backdrop')) {
                    this.close();
                }
            });

            document.addEventListener('keydown', (e) => {
                if (this.modal.classList.contains('active')) {
                    if (e.key === 'ArrowLeft') this.previousPage();
                    if (e.key === 'ArrowRight') this.nextPage();
                    if (e.key === 'Escape') this.close();
                }
            });

            window.addEventListener('resize', () => {
                this.isDesktop = window.innerWidth > 768;
                if (this.modal.classList.contains('active')) {
                    this.updateDisplay();
                }
            });
        }

        open() {
            this.modal.classList.add('active');
            document.body.style.overflow = 'hidden';
            this.currentPage = 0;
            this.isDesktop = window.innerWidth > 768;
            this.updateDisplay();
            
            if (!this.isDesktop) {
                this.adjustMobilePosition();
            }
        }

        // finicky for double-pages, adjust later
        adjustMobilePosition() {
            // keep below header
            const mobileHeader = document.querySelector('header.sm\\:hidden');
            const headerHeight = mobileHeader ? mobileHeader.offsetHeight : 0;
            
            const flipbookContent = this.modal.querySelector('.flipbook-content');
            if (flipbookContent) {
                flipbookContent.style.paddingTop = `${headerHeight + 16}px`;
                flipbookContent.style.height = `calc(100vh - ${headerHeight}px)`;
            }
        }

        close() {
            this.modal.classList.remove('active');
            document.body.style.overflow = '';
            
            const flipbookContent = this.modal.querySelector('.flipbook-content');
            if (flipbookContent) {
                flipbookContent.style.paddingTop = '';
                flipbookContent.style.height = '';
            }
        }

        previousPage() {
            if (this.currentPage > 0) {
                this.currentPage = this.getPreviousPageIndex();
                this.updateDisplay();
            }
        }

        nextPage() {
            if (this.currentPage < this.pages.length - 1) {
                this.currentPage = this.getNextPageIndex();
                this.updateDisplay();
            }
        }

        // need to fix going backwards when reading with double pages
        getPreviousPageIndex() {
            const currentPageData = this.pages[this.currentPage];
            
            if (!this.isDesktop || currentPageData.span === 'double') {
                return Math.max(0, this.currentPage - 1);
            }
            
            if (this.currentPage === 0) {
                return 0;
            }
            
            if (this.currentPage === 1) {
                return 0;
            }
            
            let targetIndex = this.currentPage - 2;
            
            for (let i = this.currentPage - 1; i >= 0; i--) {
                if (this.pages[i].span === 'double') {
                    targetIndex = i;
                    break;
                }
            }
            
            return Math.max(0, targetIndex);
        }

        getNextPageIndex() {
            const currentPageData = this.pages[this.currentPage];
            
            // reading only by one page in mobile/small-screen
            if (!this.isDesktop) {
                return Math.min(this.pages.length - 1, this.currentPage + 1);
            }
            
            if (currentPageData.span === 'double') {
                return Math.min(this.pages.length - 1, this.currentPage + 1);
            }
            
            if (this.currentPage === 0) {
                return 1;
            }
            
            // jumping to double pages
            const nextPageIndex = this.currentPage + 1;
            if (nextPageIndex < this.pages.length && this.pages[nextPageIndex].span === 'double') {
                return nextPageIndex;
            }
            
            return Math.min(this.pages.length - 1, this.currentPage + 2);
        }

        updateDisplay() {
            let displayHTML = '';
            const currentPageData = this.pages[this.currentPage];
            
            if (!this.isDesktop) {
                // reading only by one page in mobile/small-screen
                displayHTML = `
                    <div class="single-page ${currentPageData.span === 'double' ? 'double-width-mobile' : ''}">
                    <img src="${currentPageData.src}" alt="Page ${this.currentPage + 1}" class="book-page" />
                    </div>
                `;
            } else {
                if (currentPageData.span === 'double') {
                    displayHTML = `
                        <div class="double-page-spread">
                            <img src="${currentPageData.src}" alt="Page ${this.currentPage + 1}" class="book-page double-page" />
                        </div>
                    `;
                } else {
                    const isFirstPage = this.currentPage === 0;
                    const isLastPage = this.currentPage === this.pages.length - 1;
                    
                    if (isFirstPage || isLastPage) {
                        displayHTML = `
                            <div class="single-page">
                            <img src="${currentPageData.src}" alt="Page ${this.currentPage + 1}" class="book-page" />
                            </div>
                        `;
                    } else {
                        const rightPageIndex = this.currentPage + 1;
                        const rightPageData = this.pages[rightPageIndex];
                        
                        if (rightPageIndex < this.pages.length && rightPageData.span !== 'double') {
                            displayHTML = `
                            <div class="double-spread">
                                <img src="${currentPageData.src}" alt="Page ${this.currentPage + 1}" class="book-page left-page" />
                                <img src="${rightPageData.src}" alt="Page ${rightPageIndex + 1}" class="book-page right-page" />
                            </div>
                            `;
                        } else {
                            // right page is a double or doesn't exist, show single
                            displayHTML = `
                            <div class="single-page">
                                <img src="${currentPageData.src}" alt="Page ${this.currentPage + 1}" class="book-page" />
                            </div>
                            `;
                        }
                    }
                }
            }
            
            this.bookDisplay.innerHTML = displayHTML;
            this.updateNavigation();
        }

        updateNavigation() {
            const isFirstPage = this.currentPage === 0;
            const isLastPage = this.currentPage === this.pages.length - 1;
            
            this.prevBtn.disabled = isFirstPage;
            this.nextBtn.disabled = isLastPage;
        }
    }

    // initialize
    document.addEventListener('DOMContentLoaded', () => {
        if (pages && pages.length > 0) {
            window.simpleFlipbook = new SimpleFlipbook(pages);
        }
    });
</script>
